%{
#include <stdlib.h>
#include <stdio.h>
#define  GNU_SOURCE
int tabid[26];
int proxEnd = 0;
%}
%union {char id; int num; char* str;}
%token  INTEGER CODE VAR END PRINT READ
%token <id> ID
%token <num> NUM
%type <str> Decls Code Declaracao Tipo Instrucao Instrucoes Declaracoes Atrib Escrita Leitura Termo Fator Expr
%%
Programa : Decls Code { printf("%s\nSTART\n%s\nSTOP\n", $1, $2); }
         ;

Decls : VAR Declaracoes { $$=$2; }
      ;

Declaracoes : Declaracao { $$=$1; }
            | Declaracoes ';' Declaracao { asprintf(&$$, "%s%s", $1, $3); }
            ;

Declaracao : ID ':'  Tipo { if(tabid[$1 - 'a'] == -1){ 
                                tabid[$1 - 'a'] = proxEnd++;
                                asprintf(&$$, "PUSHI 0\n");
                            } else{
                                printf("Variavel (%c) j√° declarada\n", $1);
                                exit(1);
                            }
                           }
           ;

Tipo : INTEGER
     ;

Code : CODE Instrucoes END { $$=$2; }
     ;

Instrucoes : Instrucao                  {$$=$1;}
           | Instrucoes ';' Instrucao   {asprintf(&$$, "%s%s", $1, $3);}
           ;

Instrucao : Atrib   { $$=$1; }
          | Leitura { $$=$1; }
          | Escrita { $$=$1; }
          ;

Atrib : ID '=' Expr     {asprintf(&$$, "%s\n", $3}
      ;

Leitura : READ '(' ID ')'
        ;

Escrita : PRINT '(' ID ')'
        ;

Expr : Termo
     | Expr '+' Termo
     | Expr '-' Termo
     ;
Termo : Fator
      | Termo '*' Fator
      | Termo '/' Fator
      ;
Fator : NUM
      | ID
      | '(' Expr ')'
      ;

%%

#include "lex.yy.c"

void yyerror(char* s){
    printf("Error: %s\n", s);
}

int main() {
    for(int i = 0; i < 26; i++){
        tabid[i] = -1;
    }
    yyparse();
    return 0;
}
